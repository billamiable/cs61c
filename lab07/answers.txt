Exercise 1
	Scenario 1
		1. Because step size in bytes is exactly equal to total block size in bytes.
		2. Still 0. Because the step size doesn't change. Everytime it access the cache, it access the same slot.
		3. We can modify a1(step size) to 1.

	Scenario 2
		1. 64.
		2. Every 4 access, it miss at first, then hit three times.
		3. At first iteration, every 4 access it hit 3 times, so the hit rate equals to 3/4 = 75%. After the first iteration, the whole data need to be accessed is stored 
	 	   in the cache. So after the first iteration, every access to the cache will hit. 
		4. the hit rate will approach to 1 as Rep Count goes to infinity.
		5. we should try to access 256 bytes of the array at a time and apply all of the function to that certain amount of array so we can be completely done with it before moving on,
		   thereby keeping that certain data of array hot in the cache and not having to circle back to it later on! 

	Scenario 3
		1. The hit rate of L1 is 50%. The hit rate of L2 is 0%. Overall the hit rate is 50%.
		2. 32 access total. 16 of them miss.
		3. 16 access total. Every time L1 miss, we access L2.
		4. We can increase the block size of L2.
		5. As we slowly increase the number of blocks in L1, the hit rates for L1 and L2 remain the same. As for L1 block size, the hit rate for L1 increase but for L2 remain the same.

Exercise 2
	ijk: 1.446 Gflop/s
	ikj: 0.218 Gflop/s
	jik: 1.351 Gflop/s
	jki: 9.446 Gflop/s
	kij: 0.221 Gflop/s
	kji: 8.032 Gflop/s

	1. jki perform the best. Because the average step size of C, A, B is smallest, which make full use of spatial locality and leads to highest hit rate.
	2. ikj and kij perform the worst. Because the average step size of C, A, B is largest.
	3. We should stride as small size as we can.

Exercise 3
	Part 1
		blocksize = 20, n = 100: 
			Testing naive transpose: 0.005 milliseconds
			Testing transpose with blocking: 0.008 milliseconds
		blocksize = 20, n = 1000: 
			Testing naive transpose: 1.165 milliseconds
			Testing transpose with blocking: 1.013 milliseconds
		blocksize = 20, n = 2000: 
			Testing naive transpose: 17.627 milliseconds
			Testing transpose with blocking: 4.325 milliseconds
		blocksize = 20, n = 5000: 
			Testing naive transpose: 158.257 milliseconds
			Testing transpose with blocking: 31.023 milliseconds
		blocksize = 20, n = 10000: 
			Testing naive transpose: 795.904 milliseconds
			Testing transpose with blocking: 141.612 milliseconds

		1. when n = 1000
		2. Because the it needs more calculation. 

	Part 2
		blocksize = 50, n = 10000:
			Testing naive transpose: 788.476 milliseconds
			Testing transpose with blocking: 151.382 milliseconds
		blocksize = 100, n = 10000:
			Testing naive transpose: 787.555 milliseconds
			Testing transpose with blocking: 141.338 milliseconds
		blocksize = 500, n = 10000:
			Testing naive transpose: 791.515 milliseconds
			Testing transpose with blocking: 184.733 milliseconds
		blocksize = 1000, n = 10000:
			Testing naive transpose: 796.314 milliseconds
			Testing transpose with blocking: 210.494 milliseconds
		blocksize = 5000, n = 10000:
			Testing naive transpose: 803.748 milliseconds
			Testing transpose with blocking: 778.843 milliseconds
		1. Because the block size we set is not the actual block size in our hardware.
